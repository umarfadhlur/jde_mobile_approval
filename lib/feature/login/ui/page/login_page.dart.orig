import 'package:bot_toast/bot_toast.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:jde_mobile_approval/core/constant/constants.dart';
import 'package:jde_mobile_approval/core/widget/background.dart';
import 'package:jde_mobile_approval/core/widget/button_login.dart';
import 'package:jde_mobile_approval/core/widget/text_form_input.dart';
import 'package:jde_mobile_approval/feature/login/bloc/login_bloc.dart';
import 'package:jde_mobile_approval/feature/login/data/repository/login_repo.dart';
import 'package:jde_mobile_approval/feature/login/ui/page/home_page.dart';
import 'package:get/get.dart';

class LoginPage extends StatefulWidget {
  @override
  _LoginPageState createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _urlController = TextEditingController();
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  late final LoginBloc _loginBloc;
  bool _isHidePass = true;
  bool isSwitched = false;

  @override
  void initState() {
    super.initState();
    _loginBloc = LoginBloc(loginRepository: LoginRepositoryImpl());
  }

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    _urlController.dispose();
    _loginBloc.close();
    super.dispose();
  }

  void _togglePasswordVisibility() {
    setState(() {
      _isHidePass = !_isHidePass;
    });
  }

  void _loginProgress() {
    BotToast.showLoading();
    _loginBloc.add(LoginSubmit(
      username: _emailController.text,
      password: _passwordController.text,
    ));
  }

  void _openPreferences() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          content: Stack(
            clipBehavior: Clip.none,
            children: <Widget>[
              Positioned(
                right: -40.0,
                top: -40.0,
                child: InkResponse(
                  onTap: () => Navigator.of(context).pop(),
                  child: CircleAvatar(
                    backgroundColor: ColorCustom.blueColor,
                    child: Icon(Icons.close, color: Colors.white),
                  ),
                ),
              ),
              Form(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: <Widget>[
                    const Padding(
                      padding: EdgeInsets.all(8.0),
                      child: Text(
                        'URL Preferences',
                        textAlign: TextAlign.center,
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 20.0,
                          color: Colors.blue,
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: TextFormField(
                        textAlign: TextAlign.center,
                        controller: _urlController,
                        decoration: const InputDecoration(
                          hintText: "Input URL Here..",
                          contentPadding: EdgeInsets.all(15.0),
                        ),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: ElevatedButton(
                        style: ElevatedButton.styleFrom(
                          backgroundColor: ColorCustom.blueColor,
                        ),
                        child: const Text("Submit"),
                        onPressed: () {},
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return BlocProvider<LoginBloc>(
      create: (context) => _loginBloc,
      child: BlocListener<LoginBloc, LoginState>(
        listener: (context, state) {
          if (state is LoginErrorState) {
            BotToast.closeAllLoading();
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                backgroundColor: Colors.red,
                content: Text(state.message),
              ),
            );
          } else if (state is LoginSuccessState) {
            BotToast.closeAllLoading();
            Get.off(() => HomePage());
          }
        },
        child: Scaffold(
          key: _scaffoldKey,
          body: SafeArea(
            child: SingleChildScrollView(
              child: Stack(
                children: [
                  background(
                      context: context, color: ColorCustom.whiteGradient),
                  Positioned(
                    top: 50.0,
                    bottom: 0.0,
                    child: Container(
                      width: MediaQuery.of(context).size.width,
                      height: MediaQuery.of(context).size.height,
                      decoration: const BoxDecoration(color: Colors.white),
                      child: Form(
                        child: Column(
                          children: [
                            const SizedBox(height: 100),
                            Image.asset('assets/images/logoOpusB.png',
                                height: 50),
                            const SizedBox(height: 40),
                            Container(
                              // width: MediaQuery.of(context).size.width - 67.0,
                              width: MediaQuery.of(context)
                                  .size
                                  .width
                                  .clamp(0, double.infinity),

                              child: const Text(
                                'Sign In \nto Your Account',
                                textAlign: TextAlign.left,
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  fontSize: 20.0,
                                  color: Colors.blue,
                                ),
                              ),
                            ),
                            const SizedBox(height: 10),
                            textFormInput(
                              iconName:
                                  const Icon(Icons.people, color: Colors.white),
                              hintText: "username",
                              isEmail: true,
                              controllerName: _emailController,
                            ),
                            const SizedBox(height: 10),
                            textFormInput(
                              iconName: const Icon(Icons.vpn_key,
                                  color: Colors.white),
                              hintText: "password",
                              isPassword: _isHidePass,
                              controllerName: _passwordController,
                              pass: GestureDetector(
                                onTap: _togglePasswordVisibility,
                                child: Icon(
                                  _isHidePass
                                      ? Icons.visibility_off
                                      : Icons.visibility,
                                  color: _isHidePass
                                      ? Colors.grey[300]
                                      : Colors.black,
                                ),
                              ),
                            ),
                            const SizedBox(height: 10),
                            buttonLogin(
                              color: ColorCustom.blueGradient1,
                              textName: "LOGIN",
                              onPress: _loginProgress,
                            ),
                          ],
                        ),
                      ),
                    ),
                  )
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
