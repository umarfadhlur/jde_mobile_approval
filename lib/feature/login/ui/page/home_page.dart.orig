import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:jde_mobile_approval/feature/main_menu/data/model/get_connect_watchlist.dart';
import 'package:jde_mobile_approval/feature/main_menu/data/model/get_data_f980051.dart';
import 'package:jde_mobile_approval/feature/main_menu/bloc/menu_bloc.dart';
import 'package:jde_mobile_approval/feature/login/bloc/login_bloc.dart';
import 'package:jde_mobile_approval/feature/login/data/repository/login_repo.dart';
import 'package:jde_mobile_approval/feature/main_menu/data/repository/menu_repo.dart';
import 'package:flutter/material.dart';
import 'package:jde_mobile_approval/core/constant/shared_preference.dart';
import 'package:jde_mobile_approval/feature/login/ui/page/login_page.dart';
import 'package:jde_mobile_approval/feature/main_menu/ui/widget/main_menu.dart';
import 'package:get/get.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:bot_toast/bot_toast.dart';
import 'dart:convert';
import 'dart:async';

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String _environment = "", _username = "", _token = "";
  late MenuBloc _menuBloc;
  int _sec = 100000000;

  final LoginBloc _addLoginBloc =
      LoginBloc(loginRepository: LoginRepositoryImpl());

  @override
  void initState() {
    super.initState();
    _menuBloc = MenuBloc(menuRepository: MenuRepositoryImpl());
    _menuBloc.add(GetAll(username: _username));

    _loadUserData();

    Future.delayed(Duration(milliseconds: _sec), () {
      _addLoginBloc.add(LogoutSubmit(token: _token));
      Get.off(() => LoginPage());
    });
  }

  Future<void> _loadUserData() async {
    final prefVal = await SharedPreferences.getInstance();
    setState(() {
      _username = prefVal.getString(SharedPref.username) ?? "";
      _environment = prefVal.getString(SharedPref.environtment) ?? "";
      _token = prefVal.getString(SharedPref.token) ?? "";
    });
  }

  Future<void> onRefresh() async {
    _menuBloc.add(GetAll(username: _username));
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        setState(() {
          _sec += 30000; // Tambah 30 detik dalam milidetik
          print(_sec);
        });
      },
      child: Scaffold(
        appBar: AppBar(
          elevation: 0,
          title: Image.asset(
            'assets/images/logoOpusB.png',
            fit: BoxFit.fitHeight,
            height: 32,
          ),
          centerTitle: true,
          iconTheme: IconThemeData(color: Colors.white),
          leading: IconButton(
            icon: Icon(Icons.notifications),
            tooltip: "Notifications",
            onPressed: () {
              _showNotification(context);
            },
          ),
          actions: [
            IconButton(
              icon: Icon(Icons.refresh),
              tooltip: 'Refresh',
              onPressed: onRefresh,
            ),
            IconButton(
              icon: Icon(Icons.exit_to_app),
              tooltip: "Logout",
              onPressed: () async {
                BotToast.showLoading(duration: Duration(milliseconds: 500));
                _addLoginBloc.add(LogoutSubmit(token: _token));
                final prefs = await SharedPreferences.getInstance();
                await prefs.clear();
                Get.off(() => LoginPage());
              },
            ),
          ],
        ),
        body: SafeArea(
          child: Column(
            children: [
              ListTile(
                tileColor: Theme.of(context).primaryColor,
                leading: CircleAvatar(
                  backgroundImage: AssetImage('assets/images/profile1.jpg'),
                ),
                title: Text(
                  '$_username\n$_environment',
                  style: TextStyle(color: Colors.white),
                ),
              ),
              MainMenu(),
              Expanded(
                child: BlocProvider.value(
                  value: _menuBloc,
                  child: BlocBuilder<MenuBloc, MenuState>(
                    builder: (context, state) {
                      if (state is NewWatchlistLoadedState) {
                        return buildWatchlist(state.details);
                      }
                      if (state is GetAllSuccess) {
                        return buildWatchlist(state.watchList);
                      }
                      if (state is LoadingState) {
                        return Center(child: CircularProgressIndicator());
                      }
                      return Container();
                    },
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget buildList(List<F980051> details) {
    if (details.isEmpty) {
      return Center(
        child: Text(
          'No Notifications',
          style: TextStyle(fontSize: 20.0, fontWeight: FontWeight.w600),
        ),
      );
    }

    return ListView.builder(
      shrinkWrap: true,
      itemCount: details.length,
      itemBuilder: (context, item) {
        final decodedData = jsonDecode(
          utf8.decode(base64.decode(details[item].repositoryBlob)),
        );

        return ListTile(
          title: Text(decodedData['subject'], style: TextStyle(fontSize: 18.0)),
          subtitle: Text(
            details[item]
                .notificationLastNotifiedUTime
                .toString()
                .substring(0, 19),
            style: TextStyle(fontSize: 15.0),
          ),
        );
      },
    );
  }

  Widget buildWatchlist(List<AbConnectWatchlistRepeating> details) {
    if (details.isEmpty) {
      return Center(
        child: Text(
          'No Watchlist',
          style: TextStyle(fontSize: 20.0, fontWeight: FontWeight.w600),
        ),
      );
    }

    return ListView.builder(
      shrinkWrap: true,
      itemCount: details.length,
      itemBuilder: (context, item) {
        final detail = details[item];

        return ListTile(
          title: Text(detail.name, style: TextStyle(fontSize: 20)),
          leading: CircleAvatar(
            backgroundColor:
                detail.rowcountRecords >= int.parse(detail.criticalThreshold)
                    ? Colors.red
                    : Colors.blue,
            child: Text(
              detail.rowcountRecords.toString(),
              style: TextStyle(color: Colors.white, fontSize: 20),
            ),
          ),
        );
      },
    );
  }

  Future<void> _showNotification(BuildContext context) async {
    return showDialog(
      context: context,
      builder: (context) {
        return Dialog(
          backgroundColor: Colors.transparent,
          insetPadding: EdgeInsets.all(10),
          child: Container(
            padding: EdgeInsets.all(20),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(15),
              color: Colors.white,
            ),
            child: BlocProvider.value(
              value: _menuBloc,
              child: BlocBuilder<MenuBloc, MenuState>(
                builder: (context, state) {
                  if (state is F980051LoadedState) {
                    return buildList(state.details);
                  }
                  if (state is GetAllSuccess) {
                    return buildList(state.notify);
                  }
                  if (state is LoadingState) {
                    return Center(child: CircularProgressIndicator());
                  }
                  return Container();
                },
              ),
            ),
          ),
        );
      },
    );
  }
}
